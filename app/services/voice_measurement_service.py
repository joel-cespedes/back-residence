# app/services/voice_measurement_service.py
"""
Servicio para procesamiento de transcripciones de voz de mediciones usando regex y fuzzy matching
"""

import re
from typing import Optional, Dict, Any, Tuple
from rapidfuzz import fuzz, process
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models import Resident, Room, Bed


class VoiceMeasurementService:
    """Servicio para procesamiento de voz de mediciones usando regex y fuzzy matching"""

    def __init__(self):
        pass

    async def parse_measurement_transcript(self, transcript: str) -> Dict[str, Any]:
        """
        Extrae el nombre del residente, tipo de medici칩n y valores del transcript.

        Ejemplos de transcripts:
        - "Tensi칩n de Juan P칠rez 120 80"
        - "Ox칤geno de Mar칤a Garc칤a 98"
        - "Peso de Pedro L칩pez 75 kilos"
        - "Temperatura de Ana Mart칤nez 36.5"

        Returns:
            Dict con: resident_name, measurement_type, values
        """
        try:
            text = transcript.strip().lower()

            # Palabras clave para cada tipo de medici칩n
            measurement_keywords = {
                "bp": ["tensi칩n", "presi칩n", "presi칩n arterial", "sist칩lica", "diast칩lica"],
                "spo2": ["ox칤geno", "saturaci칩n", "oximetr칤a", "ox칤metro"],
                "weight": ["peso", "kilos", "kilogramos", "b치scula"],
                "temperature": ["temperatura", "fiebre", "grados"]
            }

            # Detectar tipo de medici칩n
            measurement_type = None
            for mtype, keywords in measurement_keywords.items():
                if any(keyword in text for keyword in keywords):
                    measurement_type = mtype
                    break

            if not measurement_type:
                return {
                    "resident_name": "",
                    "measurement_type": None,
                    "values": {},
                    "confidence": 0.0,
                    "error": "No se pudo identificar el tipo de medici칩n"
                }

            # Patr칩n para extraer nombre: buscar despu칠s del 칔LTIMO "de" hasta encontrar n칰meros
            # Ejemplo: "saturaci칩n de ox칤geno de Juan P칠rez 98" -> "Juan P칠rez"
            # Primero, encontrar todas las ocurrencias de "de"
            de_positions = [m.start() for m in re.finditer(r'\bde\b', text)]

            if not de_positions:
                return {
                    "resident_name": "",
                    "measurement_type": measurement_type,
                    "values": {},
                    "confidence": 0.0,
                    "error": "No se encontr칩 la palabra 'de' para identificar el nombre"
                }

            # Usar el 칰ltimo "de" encontrado
            last_de_pos = de_positions[-1]
            text_after_last_de = text[last_de_pos:]

            # Extraer nombre despu칠s del 칰ltimo "de"
            name_pattern = r"de\s+([a-z치칠칤칩칰침\s]+?)(?=\s+\d)"
            name_match = re.search(name_pattern, text_after_last_de)

            if not name_match:
                return {
                    "resident_name": "",
                    "measurement_type": measurement_type,
                    "values": {},
                    "confidence": 0.0,
                    "error": "No se pudo identificar el nombre del residente"
                }

            resident_name = name_match.group(1).strip().title()

            # Extraer valores seg칰n el tipo de medici칩n
            values = {}

            if measurement_type == "bp":
                # Buscar dos n칰meros: sist칩lica y diast칩lica
                numbers = re.findall(r"\b(\d{2,3})\b", text)
                if len(numbers) >= 2:
                    values["systolic"] = int(numbers[0])
                    values["diastolic"] = int(numbers[1])
                    # Buscar pulso opcional (tercer n칰mero)
                    if len(numbers) >= 3:
                        values["pulse_bpm"] = int(numbers[2])
                else:
                    return {
                        "resident_name": resident_name,
                        "measurement_type": measurement_type,
                        "values": {},
                        "confidence": 0.5,
                        "error": "No se encontraron valores de presi칩n arterial (se esperan 2 n칰meros)"
                    }

            elif measurement_type == "spo2":
                # Buscar un n칰mero (saturaci칩n)
                numbers = re.findall(r"\b(\d{2,3})\b", text)
                if len(numbers) >= 1:
                    values["spo2"] = int(numbers[0])
                    # Buscar pulso opcional (segundo n칰mero)
                    if len(numbers) >= 2:
                        values["pulse_bpm"] = int(numbers[1])
                else:
                    return {
                        "resident_name": resident_name,
                        "measurement_type": measurement_type,
                        "values": {},
                        "confidence": 0.5,
                        "error": "No se encontr칩 valor de saturaci칩n de ox칤geno"
                    }

            elif measurement_type == "weight":
                # Buscar n칰mero con posible decimal
                weight_match = re.search(r"\b(\d{2,3}(?:\.\d{1,2})?)\b", text)
                if weight_match:
                    values["weight_kg"] = float(weight_match.group(1))
                else:
                    return {
                        "resident_name": resident_name,
                        "measurement_type": measurement_type,
                        "values": {},
                        "confidence": 0.5,
                        "error": "No se encontr칩 valor de peso"
                    }

            elif measurement_type == "temperature":
                # Buscar n칰mero con posible decimal
                temp_match = re.search(r"\b(\d{2}(?:\.\d{1})?)\b", text)
                if temp_match:
                    values["temperature_c"] = float(temp_match.group(1))
                else:
                    return {
                        "resident_name": resident_name,
                        "measurement_type": measurement_type,
                        "values": {},
                        "confidence": 0.5,
                        "error": "No se encontr칩 valor de temperatura"
                    }

            print(f"游댌 DEBUG Measurement Parser:")
            print(f"   Transcript: {transcript}")
            print(f"   Resident: {resident_name}")
            print(f"   Type: {measurement_type}")
            print(f"   Values: {values}")

            return {
                "resident_name": resident_name,
                "measurement_type": measurement_type,
                "values": values,
                "confidence": 1.0,
                "error": None
            }

        except Exception as e:
            return {
                "resident_name": "",
                "measurement_type": None,
                "values": {},
                "confidence": 0.0,
                "error": f"Error al procesar transcript: {str(e)}"
            }

    async def find_resident_by_name(
        self,
        resident_name: str,
        residence_id: str,
        db: AsyncSession
    ):
        """
        Busca un residente por nombre usando fuzzy matching

        Returns:
            Tuple (resident_id, resident_name, None) si encuentra coincidencia 칰nica
            Tuple (None, "error_message", None) si hay error de validaci칩n
            Tuple (None, None, [list_of_options]) si hay ambig칲edad (m칰ltiples matches)
            None si no encuentra coincidencia
        """
        if not resident_name:
            return None

        # Validar que tenga al menos nombre y apellido (m칤nimo 2 palabras)
        words = resident_name.strip().split()
        if len(words) < 2:
            return (None, "Por favor, di al menos el nombre y apellido del residente", None)

        # Obtener todos los residentes de la residencia
        query = select(Resident).where(
            Resident.residence_id == residence_id,
            Resident.deleted_at.is_(None)
        )
        result = await db.execute(query)
        residents = result.scalars().all()

        if not residents:
            return None

        # Preparar lista de nombres para fuzzy matching
        resident_names = [(r.id, r.full_name, r.bed_id, r.room_id) for r in residents]

        # Buscar TODAS las coincidencias (no solo la mejor)
        all_matches = process.extract(
            resident_name,
            [name for _, name, _, _ in resident_names],
            scorer=fuzz.ratio,
            score_cutoff=60,
            limit=None  # Todas las coincidencias
        )

        if not all_matches:
            return None

        # Verificar si hay m칰ltiples coincidencias con score muy similar
        top_score = all_matches[0][1]
        # Considerar "similar" si la diferencia es menor a 5%
        similar_matches = [m for m in all_matches if top_score - m[1] < 5]

        if len(similar_matches) > 1:
            # Hay ambig칲edad - construir lista de opciones
            options = []
            for match_name, score in similar_matches[:5]:  # M치ximo 5 opciones
                # Buscar info adicional del residente
                for res_id, full_name, bed_id, room_id in resident_names:
                    if full_name == match_name:
                        # Obtener nombre de room y bed
                        room_name = None
                        bed_number = None
                        floor_name = None

                        if room_id:
                            room_query = select(Room.name, Room.floor_name).where(Room.id == room_id)
                            room_result = await db.execute(room_query)
                            room_row = room_result.one_or_none()
                            if room_row:
                                room_name, floor_name = room_row

                        if bed_id:
                            bed_query = select(Bed.number).where(Bed.id == bed_id)
                            bed_result = await db.execute(bed_query)
                            bed_number = bed_result.scalar()

                        options.append({
                            "id": res_id,
                            "full_name": full_name,
                            "room_name": room_name,
                            "bed_number": bed_number,
                            "floor_name": floor_name
                        })
                        break

            return (None, None, options)

        # Si hay solo 1 coincidencia clara, devolverla
        matched_name = all_matches[0][0]
        # Encontrar el ID del residente que coincide
        for resident_id, name, _, _ in resident_names:
            if name == matched_name:
                return (resident_id, name, None)

        return None

    def validate_measurement_values(
        self,
        measurement_type: str,
        values: Dict[str, Any]
    ) -> Tuple[bool, Optional[str]]:
        """
        Valida que los valores de la medici칩n est칠n dentro de rangos v치lidos

        Returns:
            Tuple (is_valid, error_message)
        """
        if measurement_type == "bp":
            systolic = values.get("systolic")
            diastolic = values.get("diastolic")

            if not systolic or not diastolic:
                return (False, "Se requieren valores de presi칩n sist칩lica y diast칩lica")

            if not (70 <= systolic <= 200):
                return (False, "La presi칩n sist칩lica debe estar entre 70 y 200 mmHg")

            if not (40 <= diastolic <= 130):
                return (False, "La presi칩n diast칩lica debe estar entre 40 y 130 mmHg")

            pulse = values.get("pulse_bpm")
            if pulse and not (40 <= pulse <= 200):
                return (False, "El pulso debe estar entre 40 y 200 bpm")

        elif measurement_type == "spo2":
            spo2 = values.get("spo2")

            if not spo2:
                return (False, "Se requiere valor de saturaci칩n de ox칤geno")

            if not (0 <= spo2 <= 100):
                return (False, "La saturaci칩n de ox칤geno debe estar entre 0 y 100%")

            pulse = values.get("pulse_bpm")
            if pulse and not (40 <= pulse <= 200):
                return (False, "El pulso debe estar entre 40 y 200 bpm")

        elif measurement_type == "weight":
            weight = values.get("weight_kg")

            if not weight:
                return (False, "Se requiere valor de peso")

            if not (20 <= weight <= 300):
                return (False, "El peso debe estar entre 20 y 300 kg")

        elif measurement_type == "temperature":
            temperature = values.get("temperature_c")

            if not temperature:
                return (False, "Se requiere valor de temperatura")

            if not (30 <= temperature <= 45):
                return (False, "La temperatura debe estar entre 30 y 45춿C")

        else:
            return (False, f"Tipo de medici칩n desconocido: {measurement_type}")

        return (True, None)

    def generate_confirmation_message(
        self,
        resident_name: str,
        measurement_type: str,
        values: Dict[str, Any]
    ) -> str:
        """
        Genera el mensaje de confirmaci칩n para la medici칩n
        """
        type_labels = {
            "bp": "Presi칩n arterial",
            "spo2": "Saturaci칩n de ox칤geno",
            "weight": "Peso",
            "temperature": "Temperatura"
        }

        type_label = type_labels.get(measurement_type, measurement_type)

        if measurement_type == "bp":
            systolic = values.get("systolic")
            diastolic = values.get("diastolic")
            pulse = values.get("pulse_bpm")
            if pulse:
                return f"Medici칩n registrada: {type_label} {systolic}/{diastolic} mmHg, pulso {pulse} bpm para {resident_name}"
            else:
                return f"Medici칩n registrada: {type_label} {systolic}/{diastolic} mmHg para {resident_name}"

        elif measurement_type == "spo2":
            spo2 = values.get("spo2")
            pulse = values.get("pulse_bpm")
            if pulse:
                return f"Medici칩n registrada: {type_label} {spo2}%, pulso {pulse} bpm para {resident_name}"
            else:
                return f"Medici칩n registrada: {type_label} {spo2}% para {resident_name}"

        elif measurement_type == "weight":
            weight = values.get("weight_kg")
            return f"Medici칩n registrada: {type_label} {weight} kg para {resident_name}"

        elif measurement_type == "temperature":
            temperature = values.get("temperature_c")
            return f"Medici칩n registrada: {type_label} {temperature}춿C para {resident_name}"

        return f"Medici칩n registrada para {resident_name}"
